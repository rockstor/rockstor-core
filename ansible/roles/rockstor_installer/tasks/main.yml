---
# TODO: We will need to add some architecture awareness here
- debug: msg="ansible_facts.architecture={{ ansible_facts.architecture }}"

- name: Set repo version (Leap)
  set_fact:
    rs_repo_ver: "leap/{{ ansible_facts.distribution_version }}"
    oss_repo_ver: "Leap_{{ ansible_facts.distribution_version }}"
    build_packages: "{{ rs_inst_build_packages + rs_inst_leap_build_packages }}"
  when:
    - "'Leap' in ansible_facts.distribution"

- name: Set repo version (Tumbleweed)
  set_fact:
    rs_repo_ver: "tumbleweed"
    oss_repo_ver: "Tumbleweed"
    build_packages: "{{ rs_inst_build_packages + rs_inst_tumbleweed_build_packages }}"
    pip2_packages: "{{ rs_inst_tumbeweed_pip2_packages }}"
  when: "'Tumbleweed' in ansible_facts.distribution"

- name: Disable non-OSS repos
  zypper_repository:
    name: "{{ item }}"
    state: absent
  loop:
    - repo-non-oss
    - repo-update-non-oss
  when: ansible_facts.distribution_version != "15.1"

- name: Apply all upstream updates
  zypper:
    name: "*"
    state: latest
    update_cache: yes
    disable_recommends: yes

- name: Install build packages
  zypper:
    name: "{{ build_packages }}"
    state: present
    update_cache: no

# TODO: Might help put python2 dependencies on Tumbleweed
#- name: Install pip2 packages
#  command: pip2 install "{{ item }}"
#  loop: "{{ pip2_packages }}"
#  when: pip2_packages is defined

- name: Force Postgresql 10
  command: alternatives --set postgresql /usr/lib/postgresql10
  when: "'Tumbleweed' in ansible_facts.distribution"

- name: Verify installer options
  block:
# TODO: Fails on Tumbleweed
  - name: Ensure firewalld is disabled (Installer option)
    systemd:
      name: firewalld
      enabled: no
      state: stopped

  - name: Ensure openssh is installed (Installer option)
    zypper:
      name: openssh
      state: present
      update_cache: no
# TODO: Fails on Tumbleweed
  - name: Ensure sshd is enabled (Installer option)
    systemd:
      name: sshd
      enabled: yes
      state: started

# TODO: Fails on Tumbleweed
  - name: ensure wicked is disabled (Installer option)
    systemd:
      name: wickedd
      enabled: no
      state: stopped

  - name: Ensure NetworkManager is installed (Installer option)
    zypper:
      name: NetworkManager
      state: present
      update_cache: no
# TODO: Fails on Tumbleweed
  - name: Ensure NetworkManager is enabled (Installer option)
    systemd:
      name: NetworkManager
      enabled: yes
      state: started

# TODO: Fails on Tumbleweed
  - name: Stop and Disable AppArmor
    systemd:
      name: apparmor
      enabled: no
      state: stopped

- name: Disable IPv6 in grub
  block:
    - name: Set GRUB_CMDLINE_LINUX_DEFAULT
      replace:
        dest: /etc/default/grub
        regexp: ^GRUB_CMDLINE_LINUX_DEFAULT=["'](.*)["']$
        replace: 'GRUB_CMDLINE_LINUX_DEFAULT="ipv6.disable=1 \1"'
        backup: yes

    - name: grub2-mkconfig
      command: grub2-mkconfig -o /boot/grub2/grub.cfg

    - name: Reboot to ensure IPv6 disabled
      reboot:
        msg: "Reboot initiated by Ansible"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
  when: rs_inst_ipv6_disable

- name: Install useful server admin packages
  zypper:
    name: "{{ rs_inst_useful_server_packages }}"
    state: present
    update_cache: no
  when: rs_inst_useful_server_packages is defined

- name: Update btrfsprogs to 5.x
  block:
    - name: Check filesystems repo file
      stat:
        path: /etc/zypp/repos.d/filesystems.repo
      register: filesystems_repo

    - name: Add filesystems repo
      zypper_repository:
        repo: "{{ rs_inst_oss_repo_url }}"
        enabled: yes
        state: present
        runrefresh: no
      when: not filesystems_repo.stat.exists

    - name: Update btrfsprogs
      zypper:
        name: btrfsprogs
        state: latest
        refresh: yes
        extra_args_precommand: --gpg-auto-import-keys
  when:
    - rs_inst_experimental
    - "'Leap' in ansible_facts.distribution"

- name: Add ‘shells’ OBS repo
  block:
    - name: Check shells repo file
      stat:
        path: /etc/zypp/repos.d/shells.repo
      register: shells_repo

# TODO: Fails on Tumbleweed
    - name: Add shells repo
      zypper_repository:
        repo: "{{ rs_inst_bs_shell_rep_url }}"
        enabled: yes
        priority: 105
        state: present
      when: not shells_repo.stat.exists

    - name: Refresh zypper to import shells GPG key
      command:
        cmd: zypper --quiet --non-interactive --gpg-auto-import-keys refresh
        warn: no

- name: Set the Root password
  user:
    name: "root"
    password: "{{ rs_inst_root_password }}"
  when: rs_inst_set_root_pass

- name: Set up Rockstor
  block:
    - name: Import Rockstor’s public key
      rpm_key:
        state: present
        key: "{{ rs_inst_update_repo_key }}"

    - name: Add rockstor testing channel repository
      zypper_repository:
        repo: "{{ rs_inst_update_repo_url }}"
        name: "{{ rs_inst_update_repo_name }}"
        enabled: yes
        state: present
        runrefresh: yes

    - name: Install Rockstor testing rpm
      zypper:
        name: rockstor
        state: present
        disable_recommends: yes

    - name: Start the relevant rockstor related systemd services
      systemd:
        name: rockstor
        enabled: yes
        daemon_reload: yes
        state: started

    # TODO: Raise issue to discuss the lock down of ssh to only root
    #
    # This is needed because Rockstor locks down sshd to allow only the user 'root'.
    # Unfortunately, this breaks vagrant which relies on ssh via the user 'vagrant'. This will
    # be fairly problematic for any provisioners like ansible, salt, etc which will rely on ssh
    # access. Forcing the use of root for provisioning is probably a 'discussion' point!
    - name: Ensure vagrant can still ssh in (add vagrant to sshd AllowUsers)
      lineinfile:
        path: "/etc/ssh/sshd_config"
        backrefs: yes
        regexp: "^(.*AllowUsers.*)$"
        line: '\1 vagrant'

    - name: Reboot to ensure Rockstor resiliency
      reboot:
        msg: "Reboot initiated by Ansible"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime

  when: rs_inst_install_from_repo