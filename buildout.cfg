# Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
# This file is part of RockStor.
#
# RockStor is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation; either version 2 of the License,
# or (at your option) any later version.
#
# RockStor is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
[buildout]
extends = base-buildout.cfg

parts =
      stop-servers
      rpm-deps
      django
      scripts
      postgres-setup
      postgres-conf
      gunicorn
      nginx-conf
      django-settings-conf
      mime-types
      init-gunicorn
      extra-stuff
      js-libraries
      collectstatic
      supervisor
      supervisord-conf
      db-migrate
      create-cert
      docker-conf
      docker
      def-kernel

[nginx-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/conf/nginx.conf.in
output = ${buildout:directory}/etc/nginx/nginx.conf

[init-gunicorn]
recipe = collective.recipe.template
bind = 127.0.0.1
port = 8000
workers = 1
user = rocky
logfile = ${buildout:directory}/var/log/gunicorn.log
pidfile = ${buildout:directory}/var/run/gunicorn.pid
input = ${buildout:directory}/conf/gunicorn.in
output = ${buildout:directory}/etc/init.d/gunicorn

[supervisord-conf]
recipe = collective.recipe.template
host = 127.0.0.1
port = 9001
logdir = ${buildout:directory}/var/log
logfile = ${supervisord-conf:logdir}/supervisord.log
pidfile = ${buildout:directory}/var/run/supervisord.pid
gunicorn_cmd = ${buildout:directory}/bin/gunicorn --bind=${init-gunicorn:bind}:${init-gunicorn:port} --pid=${init-gunicorn:pidfile} --workers=${init-gunicorn:workers} --log-file=${init-gunicorn:logfile} --pythonpath=${buildout:directory}/src/rockstor --settings=settings --timeout=120 --graceful-timeout=120 wsgi:application
smart_manager_cmd = ${buildout:directory}/bin/sm
replicad_cmd = ${buildout:directory}/bin/replicad
ts_cmd = ${buildout:directory}/bin/task-scheduler
dc_cmd = ${buildout:directory}/bin/data-collector
sm_cmd = ${buildout:directory}/bin/service-monitor
jd_cmd = ${buildout:directory}/bin/job-dispatcher
ztask_cmd = ${buildout:directory}/bin/django ztaskd --noreload -l DEBUG --replayfailed -f ${supervisord-conf:logdir}/ztask.log
input = ${buildout:directory}/conf/supervisord.conf.in
output = ${buildout:directory}/etc/supervisord.conf

[django-settings-conf]
recipe = collective.recipe.template
rootdir = ${buildout:directory}/src/rockstor
datastore = ${django-settings-conf:rootdir}/storageadmin/datastore
smartdb = ${django-settings-conf:rootdir}/smart_manager/smartdb
pgdata_dir = /var/lib/pgsql/data
static_dir = ${django-settings-conf:rootdir}/storageadmin/static/storageadmin
template_dir1 = ${django-settings-conf:rootdir}/storageadmin/templates/storageadmin
template_dir2 = ${django-settings-conf:rootdir}/templates/admin
smb_conf = ${buildout:directory}/conf/smb.conf
logfile = ${buildout:directory}/var/log/rockstor.log
taplib = ${django-settings-conf:rootdir}/smart_manager/taplib
tapport = 10000
sinkport = 10001
input = ${buildout:directory}/conf/settings.conf.in
output = ${django-settings-conf:rootdir}/settings.py
schedulerport = 10001
reppubport = 10002
reprecvport = 10003
debug = True
kernel = '4.0.2-1.el7.elrepo.x86_64'

[js-libraries]
recipe = hexagonit.recipe.download
url = http://rockstor.com/downloads/js/lib.tgz
md5sum = a949705f5af85db40c92ea1ef8337479
strip-top-level-dir = true
destination = ${buildout:directory}/static/js/lib
on-update = true
ignore-existing = true

[postgres-setup]
recipe = plone.recipe.command
command = if [[ ! -d ${django-settings-conf:pgdata_dir} ]]; then
        echo "postgres not setup";
        systemctl enable postgresql;
        postgresql-setup initdb;
        systemctl restart postgresql;
        su - postgres -c "createdb smartdb";
        su - postgres -c "createdb storageadmin";
        sudo -u postgres psql -c "CREATE ROLE rocky WITH SUPERUSER LOGIN PASSWORD 'rocky'";
        sudo -u postgres psql storageadmin < ${buildout:directory}/conf/storageadmin.sql.in;
        sudo -u postgres psql smartdb < ${buildout:directory}/conf/smartdb.sql.in;
        sudo -u postgres psql storageadmin -c "select setval('south_migrationhistory_id_seq', (select max(id) from south_migrationhistory))";
        sudo -u postgres psql smartdb -c "select setval('south_migrationhistory_id_seq', (select max(id) from south_migrationhistory))";
        fi
update-command = ${postgres-setup:command}

[postgres-conf]
recipe = plone.recipe.command
command = su - postgres -c "cp -f ${buildout:directory}/conf/postgresql.conf /var/lib/pgsql/data/";
          su - postgres -c "cp -f ${buildout:directory}/conf/pg_hba.conf /var/lib/pgsql/data/";
          systemctl restart postgresql;
update-command = ${postgres-conf:command}

[create-cert]
recipe = plone.recipe.command
cert_loc = ${buildout:directory}/certs
command = if [[ ! -d ${create-cert:cert_loc} ]]; then
	mkdir ${create-cert:cert_loc};
	openssl req -nodes -newkey rsa:2048 -keyout ${create-cert:cert_loc}/first.key -out ${create-cert:cert_loc}/rockstor.csr -subj "/C=US/ST=Rockstor user's state/L=Rockstor user's city/O=Rockstor user/OU=Rockstor dept/CN=rockstor.user" &&
	openssl rsa -in ${create-cert:cert_loc}/first.key -out ${create-cert:cert_loc}/rockstor.key &&
        openssl x509 -in ${create-cert:cert_loc}/rockstor.csr -out ${create-cert:cert_loc}/rockstor.cert -req -signkey ${create-cert:cert_loc}/rockstor.key -days 3650
	fi
update-command = ${create-cert:command}


[def-kernel]
recipe = plone.recipe.command
command = grubby --set-default=/boot/vmlinuz-${django-settings-conf:kernel}
update-command = ${def-kernel:command}

[docker]
recipe = plone.recipe.command
binary = ${buildout:directory}/bin/docker
command = if [[ ! -f /usr/bin/docker ]]; then
	wget https://get.docker.com/builds/Linux/x86_64/docker-latest -O ${docker:binary} &&
	mv ${docker:binary} /usr/bin/docker &&
	chmod +x /usr/bin/docker
	fi
update-command = ${docker:command}

[fixtures]
recipe = plone.recipe.command
command = export DJANGO_SETTINGS_MODULE=settings &&
	  ${buildout:directory}/bin/django dumpdata --exclude contenttypes --exclude auth.Permission --natural --indent 4 > ${buildout:directory}/src/rockstor/storageadmin/fixtures/newfixture.json
update-command = ${db-migrate:command}
