# -*- mode: ruby -*-
# vi: set ft=ruby :

# Requires vagrant-host-shell and vagrant-vbguest
required_plugins = %w(
    vagrant-host-shell
    vagrant-sshfs
    )
#     vagrant-libvirt (see https://github.com/vagrant-libvirt/vagrant-libvirt)
required_plugins.each do |plugin|
  system "vagrant plugin install #{plugin}" unless Vagrant.has_plugin? plugin
end
system "vagrant plugin uninstall vagrant-vbguest"

MEM = 2048
CPU = 2
SIZE_OS_HDD = "20GB"
SIZE_DATA_HDD = "10GB"
NUM_DATA_HDD = 2

# Vagrant uses it's own build in host inventory.
ANSIBLE_GROUPS = {
  "all_groups:vars" => {
        "rs_inst_set_root_pass" => "true"
        }
}

VAGRANTFILE_API_VERSION = '2'
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    config.vm.network "private_network", type: "dhcp"

    # We need to use the Rsync folder sync type because the basic VirtualBox sharing seem to get broken with a OS update
    # Probably a kernel update breaking the vm tools.
    config.vm.synced_folder "./", "/vagrant",
        type: 'rsync',
        rsync__verbose: true,
        rsync__auto: true

    # We also need to use the Rsync folder sync type for the source folder because the basic VirtualBox sharing seem
    # to clash with the build system with regards to cross platform filesystem attributes.
    config.vm.synced_folder "../", "/opt/rockstor-core",
        type: 'rsync',
        rsync__exclude: [".git/", ".idea", "bin", "develop-eggs", "eggs"],
        rsync__verbose: true,
        rsync__auto: false

#     config.vm.provider 'virtualbox' do |vb|
#         vb.linked_clone = true
#     end

    # Enforce the minimum size requirement on the OS HDD.
    config.vm.disk :disk, size: SIZE_OS_HDD, primary: true

    config.vm.define "rockstor-leap" do |rsc|
        rsc.vm.hostname = "rockstor-leap"
        rsc.vm.box = 'bento/opensuse-leap-15'
        # VirtualBox provider is pretty standard.
        # (Other providers could be added later - eg. libvirt, kvm, esxi...)
        rsc.vm.provider :virtualbox do |vb|
            vb.memory = MEM
            vb.cpus = CPU
            # To force the console to pop up. If 'false' it will run headless.
            vb.gui = true
        end
        # Add some Data HDD to test with.
        (1..NUM_DATA_HDD).each do |i|
            rsc.vm.disk :disk, size: SIZE_DATA_HDD, name: "Data-leap-#{i}"
        end
    end
    config.vm.define "rockstor-tw" do |rstw|
        rstw.vm.hostname = "rockstor-tw"
        rstw.vm.box = "opensuse/Tumbleweed.x86_64"
        # VirtualBox provider is pretty standard.
        # (Other providers could be added later - eg. libvirt, kvm, esxi...)
        rstw.vm.provider :virtualbox do |vb|
            vb.memory = MEM
            vb.cpus = CPU
            # To force the console to pop up. If 'false' it will run headless.
            vb.gui = true
        end
        # Add some Data HDD to test with.
        (1..NUM_DATA_HDD).each do |i|
            rstw.vm.disk :disk, size: SIZE_DATA_HDD, name: "Data-tw-#{i}"
        end
    end
#     config.vm.define "rockstor-pi" do |rspi|
#        rspi.vm.hostname = "rockstor-pi"
#        rspi.vm.box = "opensuse/Tumbleweed.aarch64"
#         # Vagrant box not available on VirtualBox.
#         # Only Libvirt at present (untested - since we don't have a Aarch64 TW Rockstor package repo yet?).
#         rspi.vm.provider :libvirt do |lv|
#             lv.memory = MEM
#             lv.cpus = CPU
#             # To force the console to pop up. If 'false' it will run headless.
#             lv.gui = true
#         end
#         # Add some Data HDD to test with.
#         (1..NUM_DATA_HDD).each do |i|
#             rspi.vm.disk :disk, size: SIZE_DATA_HDD, name: "Data-pi-#{i}"
#         end
#     end

    # Inject the Aliases into the root user.
    config.vm.provision "shell", inline: <<-SHELL
        cat /vagrant/alias_rc >> /root/.bashrc
    SHELL

    # Provisioner using the external stand-alone ansible.
    # (Other provisions could be added later - eg. salt, puppet...)
    config.vm.provision "rockstor", type: "ansible" do |ansible|
        ansible.config_file = "../ansible/ansible.cfg"
        ansible.playbook = "../ansible/Rockstor.yml"
        ansible.verbose = "vv"
        ansible.groups = ANSIBLE_GROUPS
    end
end
